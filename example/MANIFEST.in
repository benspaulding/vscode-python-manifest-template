## --------------------------------
## Adding files to the distribution
##
## Setuptools is pretty good about finding the right Python source code, but you may
## need to add other supporting files.

include \
  *.ini \
  AUTHORS.txt \
  LICENSE.txt \
  MANIFEST.in \
  Makefile \
  Pipfile \           # Include Pipfile.lock? The lib vs. app debate continues ...
  README.rst \        # Included by default, but excplicit is nice.
  py.typed \
  pyproject.toml \
  setup.* \           # Same as README.rst above.

# Setuptools has implemented `graft` is differently than `prune`. This means that while:
#   prune **/templates
# would exclude all /templates directories in the tree,
#   graft **/templates
# will not include all /templates directories in the tree. :(
# But we can lean on `recursive-include` instead.
#   recursive-include **/templates *
# We can be even smarter and only include /templates directories from packages within
# our source code with:
recursive-include src/*/**/templates *

graft docs
# There is no need to `graft` the src dir because setup.py handles getting all of our
# packages and modules there. But you can if you have a lot of data files (like /static
# and /templates in a Django project) for ease.
# graft src


## ------------------------------------
## Removing files from the distribution
##
## Setuptools is pretty good about excluding appropriate bits, but you may need to
## remove files that were added in the commands above

global-exclude \
  *.py[co] \          # Only required if including files / grafting trees that may contain bytecode.
  .DS_Store \

prune **/__pycache__  # Same as *.py[co] above.
prune docs/build
